//
// NewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class NewsAPI {
    /**
     Get news
     
     - parameter apiKey: (query) apiKey 
     - parameter q: (query) query 
     - parameter page: (query) query 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNews(apiKey: String, q: String, page: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: News?,_ error: Error?) -> Void)) {
        getNewsWithRequestBuilder(apiKey: apiKey, q: q, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get news
     - GET /everything
     - parameter apiKey: (query) apiKey 
     - parameter q: (query) query 
     - parameter page: (query) query 
     - returns: RequestBuilder<News> 
     */
    open class func getNewsWithRequestBuilder(apiKey: String, q: String, page: Int) -> RequestBuilder<News> {
        let path = "/everything"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "apiKey": apiKey.encodeToJSON(), 
            "q": q.encodeToJSON(), 
            "page": page.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<News>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
